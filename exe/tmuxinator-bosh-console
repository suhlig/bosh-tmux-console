#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path('../lib', __dir__))

require 'optparse'
require 'pathname'
require 'tmuxinator/bosh/console/director_gateway'
require 'tmuxinator/bosh/console/template'

def die(msg)
  warn "Error: #{msg}"
  exit(1)
end

filter = {}
force = false

OptionParser.new do |opts|
  opts.banner = "Generates a tmuxinator configuration for the VMs of a BOSH deployment\n\n" + opts.banner
  opts.separator "\nOptions:"

  opts.on('-IFILTER', '--include=FILTER', 'include only jobs with a name matching FILTER') do |f|
    filter[:include] = Regexp.new(f)
  end

  opts.on('-XFILTER', '--exclude=FILTER', 'exclude jobs with a name matching FILTER') do |f|
    filter[:exclude] = Regexp.new(f)
  end

  opts.on('-F', '--force', 'force overriding of the project file') do
    force = true
  end
end.parse!

project_name = ARGV.shift || die('Missing argument for the tmuxinator project name')
additional_args = ARGV

project_file = Pathname("~/.tmuxinator/#{project_name}.yml").expand_path

die("Not overriding tmuxinator project file #{project_file}") if project_file.exist? && !force

# rubocop:disable Style/MixinUsage
include Tmuxinator::BOSH::Console
# rubocop:enable Style/MixinUsage

template = Template.new(Pathname(__dir__) / '../templates/bosh-console.yml')

instances = DirectorGateway.new.instances(filter)
output = template.render(binding)
project_file.write(output)
